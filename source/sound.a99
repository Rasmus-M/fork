*********************************************************************
*
* Play sound
*
* r0: Address of sound data to play
* r1: Channel to use (0-3)
*
play_sound:
       sla  r1,1
       mov  r0,@sndad0(r1)
       li   r1,1
       mov  r1,@sndct0(r1)
       b    *r11
*// play_sound

*********************************************************************
*
* Mute sound
*
mute_sound:
       li   r0,mute_table              ; Mute all
       li   r1,sound
       movb *r0+,*r1
       movb *r0+,*r1
       movb *r0+,*r1
       movb *r0+,*r1
       b    *r11
mute_table:
     byte >9f, >bf, >df, >ff
*// mute_sound

*********************************************************************
*
* Sound player
*
* Modifies r0-r3
*
sound_player:
       li   r2,2                       ; R2 is the channel offset
sound_player_1:
       mov  @sndad0(r2),r0             ; R0 is the source address
       jeq  sound_player_8
       dec  @sndct0(r2)
       jgt  sound_player_8
       clr  r1
       movb *r0+,r1                    ; Get number of bytes to read
       jne  sound_player_5
*	   Repeat command found
       mov  *r0+,r3                    ; Get loop address
       mov  @sndrp0(r2),r1             ; Get repeat counter
       jne  sound_player_2             ; Check for repeat in progress
*	   New repeat
       movb *r0,@sndrp0+1(r2)          ; Get 'number of repeats' byte
       mov  r3,@sndad0(r2)             ; Set player address to loop address
       jmp  sound_player_1
*	   Repeat in progress
sound_player_2:
       ci   r1,>00ff                   ; If repeat counter is >FF
       jeq  sound_player_3             ; we don't decrement and loop forever
       dec  @sndrp0(r2)                ; Decrement repeat counter
       jeq  sound_player_4             ; Check if last repetition
sound_player_3:
       mov  r3,@sndad0(r2)             ; Set player address to loop address
       jmp  sound_player_1
*	   Repeat done
sound_player_4:
       inc  r0                         ; Skip 'number of repeats' byte
       mov  r0,@sndad0(r2)
       jmp  sound_player_1
sound_player_5:
       swpb r1
sound_player_6:
       movb *r0+,@sound                ; Play
       dec  r1
       jne  sound_player_6
       movb *r0+,r1                    ; Read duration
       jne  sound_player_7
*	   End of sound data
       clr  @sndad0(r2)
       jmp  sound_player_8
*	   More sound data
sound_player_7:
       swpb r1
       mov  r1,@sndct0(r2)
       mov  r0,@sndad0(r2)
sound_player_8:
       dect r2
       jlt  sound_player_9
       jmp  sound_player_1
*      Return
sound_player_9:
       b    *r11
*// sound_player
