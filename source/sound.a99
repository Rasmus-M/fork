*********************************************************************
*
* Play sound
*
* r0: Address of sound data to play
* r1: Channel to use (0-3)
*
play_sound:
       sla  r1,1
       mov  r0,@sndad0(r1)
       li   r1,1
       mov  r1,@sndct0(r1)
       b    *r11
*// play_sound

*********************************************************************
*
* Mute sound
*
mute_sound:
       li   r0,mute_table              ; Mute all
       li   r1,sound
       movb *r0+,*r1
       movb *r0+,*r1
       movb *r0+,*r1
       movb *r0+,*r1
       b    *r11
mute_table:
     byte >9f, >bf, >df, >ff
*// mute_sound

*********************************************************************
*
* Sound player
*
* Modifies r0-r3
*
sound_player:
       li   r2,2                       ; R2 is the channel offset
sound_player_1:
       mov  @sndad0(r2),r0             ; R0 is the source address
       jeq  sound_player_4
       dec  @sndct0(r2)                ; Decrement counter
       jgt  sound_player_4
       clr  r1
       movb *r0+,@r1lb                 ; Get number of bytes to read
sound_player_2:
       movb *r0+,@sound                ; Play
       dec  r1
       jne  sound_player_2
       movb *r0+,r1                    ; Read duration
       jne  sound_player_3
*	   End of sound data
       clr  @sndad0(r2)
       jmp  sound_player_4
*	   More sound data
sound_player_3:
       swpb r1
       mov  r1,@sndct0(r2)
       mov  r0,@sndad0(r2)
sound_player_4:
       dect r2
       jlt  sound_player_5
       jmp  sound_player_1
*      Return
sound_player_5:
       b    *r11
*// sound_player

shot_sound:
       BYTE >02,>E4,>F0,>02                                  * W0
       BYTE >02,>E4,>F8,>02                                  * W0
       BYTE >02,>E4,>FF,>00                                  * W0
boing_sound:
       BYTE >03,>AC,>1A,>B0,>02                              * C22
       BYTE >03,>AD,>11,>B6,>02                              * G22
       BYTE >03,>A6,>0D,>BA,>02                              * C32
       BYTE >01,>BF,>00
