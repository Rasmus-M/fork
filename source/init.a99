*********************************************************************************
*
* One time initializations
*
init:
       mov  r11,*r10+                  ; Push return address onto the stack
       bl   @gmode
       li   r0,copy_loop_1
       li   r1,copy_loop
       li   r2,16
init_1:
       mov  *r0,*r1+
       dect r2
       jne  init_1
       inct r0
       li   r2,8
       bl   @copy_memory
       bl   @scroll_patterns           ; Scroll patterns and upload to VDP
       bl   @init_gfx
       li   r0,22*32
       li   r1,text_line_1
       bl   @display_text
       li   r0,23*32
       li   r1,text_line_2
       bl   @display_text
       bl   @init_map                  ; Overwrites graphics
*      Return
       b    *r15                       ; Pop return address and return
*// init

*********************************************************************************
*
* Initialize map
*
init_map:
       li   r0,map_1                   ; Source
       li   r1,map_rows                ; Destination
       li   r2,8                       ; Offset counter
       clr  r7                         ; Offset byte
init_map_1:
       li   r3,4                       ; Row counter
init_map_2:
       li   r4,2                       ; Times per row
init_map_3:
       li   r5,4                       ; Bytes per time
init_map_4:
       movb *r0+,r6                    ; Get source byte
       srl  r6,4                       ; Shift top nybble into position
       ab   r7,r6                      ; Add offset
       movb r6,*r1+                    ; Copy to destination
       sla  r6,4                       ; Shift bottom nybble into position
       andi r6,>0f00                   ; Isolate bottom nybble
       ab   r7,r6                      ; Add offset
       movb r6,*r1+                    ; Copy to destination
       dec  r5
       jne  init_map_4
       ai   r0,-4                      ; Back to start of source row
       dec  r4
       jne  init_map_3
       ai   r0,4                       ; To next source row
       dec  r3
       jne  init_map_2
       ai   r7,>1000                   ; Increase offset
       ai   r0,-16                     ; Back to start of map
       dec  r2
       jne  init_map_1
*      Return
       b    *r11
*// init_map

*********************************************************************************
*
* Scroll patterns upload to VDP
*
h_patterns:
       equ  12
v_patterns:
       equ  16
*
scroll_patterns:
       mov  r11,*r10+                  ; Push return address onto the stack
* Scroll patterns horizontally and upload to VDP
       li   r6,hchars                 ; Pointer to from/to pattern numbers
*      Pattern loop
       clr  r3                         ; Pattern counter
hscroll_1:
*      Scroll offset loop
       clr  r4                         ; Horizontal scroll offset (0-7)
hscroll_2:
       movb *r6,r7                     ; Get from and to pattern numbers
       mov  r7,r8
       andi r7,>f000
       srl  r7,9
       ai   r7,pat0                    ; Address of from pattern
       andi r8,>0f00
       srl  r8,5
       ai   r8,pat0                    ; Address of to pattern
*      Write address
       mov  r3,r0                      ; Pattern number
       sla  r0,3                       ; Multiply by 8
       mov  r4,r1                      ; Scroll offset
       sla  r1,11                      ; Multiply by >800
       ai   r1,ptrntb+>400             ; Add pattern table base plus offset
       a    r1,r0
       bl   @vwad                      ; Setup write address
*      Row loop
       li   r9,8                       ; Row counter
hscroll_3:
       movb *r7+,r1                    ; Get from byte
       movb *r8+,@r1lb                 ; Get to byte
       mov  r4,r0                      ; Get scroll offset
       jeq  hscroll_4                  ; Skip shift if zero
       sla  r1,0
hscroll_4:
       movb r1,*r13                    ; Send to VDP
*      Next row
       dec  r9
       jne  hscroll_3
*      Next scroll offset
       inc  r4
       ci   r4,8
       jlt  hscroll_2
*      Next pattern
       inc  r6
       inc  r3
       ci   r3,h_patterns                      ;
       jlt  hscroll_1
* Scroll horizontal patterns vertically and upload to VDP
       li   r6,vchars                  ; Pointer to from/to pattern numbers
*      Pattern loop
       clr  r3                         ; Pattern counter
vscroll_1:
       movb *r6+,r7                     ; Get from and to pattern numbers
       mov  r7,r8
       andi r7,>0f00
       srl  r7,5
       andi r8,>f000
       srl  r8,9
*      Horizontal loop
       clr  r4                         ; Horizontal offset (0-7)
vscroll_2:
*      Read from pattern
       mov  r4,r0
       sla  r0,11
       ai   r0,ptrntb+>400
       a    r7,r0
       li   r1,from_pattern
       li   r2,8
       bl   @vmbr
*      Read to pattern
       mov  r4,r0
       sla  r0,11
       ai   r0,ptrntb+>400
       a    r8,r0
       li   r1,to_pattern
       li   r2,8
       bl   @vmbr
*      Vertical loop
       clr  r5                         ; Vertical offset (0-7)
vscroll_3:
*      Write address
       mov  r3,r0                      ; Pattern number
       sla  r0,3                       ; Multiply by 8
       mov  r4,r1                      ; Horizontal scroll offset
       sla  r1,11                      ; Multiply by >800
       ai   r1,ptrntb                  ; Add pattern table base
       a    r1,r0                      ; Add to address
       mov  r5,r1                      ; Vertical scroll offset
       sla  r1,7                       ; Multiply by >80
       a    r1,r0                      ; Add to address
       bl   @vwad                      ; Setup write address
*      Row loop
       li   r9,8                       ; Row counter
       li   r1,from_pattern            ; Address of from/to pattern buffer
       a    r5,r1                      ; Add vertical scroll offset
vscroll_4:
       movb *r1+,*r13
       dec  r9
       jne  vscroll_4
*      Next vertical scroll offset
       inc  r5
       ci   r5,8
       jlt  vscroll_3
*      Next horizontal scroll offset
       inc  r4
       ci   r4,8
       jlt  vscroll_2
*      Next pattern
       inc  r3
       ci   r3,v_patterns                      ;
       jlt  vscroll_1
*      Return
       b    *r15                       ; Pop return address and return
from_pattern:
       equ  buffer
to_pattern:
       equ  buffer+8
*// scroll_patterns

*********************************************************************************
*
* Init graphics
*
init_gfx:
       mov  r11,*r10+                  ; Push return address onto the stack
*      Colors
       li   r0,colrtb+16
       li   r1,>8100
       li   r2,16
       bl   @vsmw
*      Sprite patterns
       bl   @decomp_sprites
*      Sprite attributes
       li   r0,spratb
       li   r3,2
init_gfx_1:
       bl   @vwad
       li   r2,4
*      Masks
init_gfx_2:
       li   r1,>af00
init_gfx_3:
       movb r1,*r13
       movb @r1lb,*r13
       clr  *r13
       clr  *r13
       ai   r1,>0010
       dec  r2
       jne  init_gfx_3
*      Player
       li   r1,center_y*256+center_x
       movb r1,*r13
       movb @r1lb,*r13
*      Next table
       ai   r0,>100
       dec  r3
       jne  init_gfx_1
*      Read character set from GROM
       li   r0,ptrntb+>700
       li   r3,8
init_gfx_4:
       bl   @vwad
       li   r4,charset
       li   r5,32
init_gfx_5:
       clr  r1
       movb *r4+,@r1lb
       ai   r1,-32
       mov  r1,r6
       sla  r1,3
       s    r6,r1
       ai   r1,1716
       movb r1,@grmwa
       movb @r1lb,@grmwa
       clr  *r13                       ; Top line
       li   r2,7
init_gfx_6:
       movb @grmrd,*r13
       dec  r2
       jne  init_gfx_6
       dec  r5
       jne  init_gfx_5
       ai   r0,>800
       dec  r3
       jne  init_gfx_4
*      Return
       b    *r15                       ; Pop return address and return
*// init_gfx


*********************************************************************************
*
* Decompress sprite patterns
*
decomp_sprites:
       mov  r11,*r10+                  ; Push return address onto the stack
       li   r0,sprptb+>400
       bl   @vwad
       li   r1,1
       li   r2,n_sprite_patterns       ; Sprite counter
       li   r3,sprite_pat_00           ; Source pointer
decomp_sprites_1:
       clr  r0                         ; Run counter
       li   r4,16                      ; Row counter
       li   r5,buffer                  ; Destination pointer
       clr  r6                         ; Pixel on/off flag
decomp_sprites_2:
       clr  r7                         ; Pixel row
       li   r8,16                      ; Pixel counter
decomp_sprites_3:
       mov  r0,r0                      ; Check run counter
       jgt  decomp_sprites_8
*      Get a new run count
decomp_sprites_10:
       mov  r6,r6
       jne  decomp_sprites_4
       movb *r3,r0                     ; Pixel off run
       srl  r0,12
       jmp  decomp_sprites_5
decomp_sprites_4:
       movb *r3+,r0                    ; Pixel on run
       swpb r0
       andi r0,>000f
decomp_sprites_5:
       jne  decomp_sprites_8
       xor  r1,r6                      ; 0 -> 1, 1 -> 0
       jmp  decomp_sprites_10
*      Set pixel
decomp_sprites_8:
       sla  r7,1
       soc  r6,r7
*      Decrement run counter
       dec  r0
       jgt  decomp_sprites_6
decomp_sprites_9:
       xor  r1,r6                      ; 0 -> 1, 1 -> 0
*      Next pixel
decomp_sprites_6:
       dec  r8
       jne  decomp_sprites_3
*      Update buffer
       movb @r7lb,@16(r5)
       movb r7,*r5+
*      Next row
       dec  r4
       jne  decomp_sprites_2
*      Upload sprite
       li   r4,32
       li   r5,buffer
decomp_sprites_7:
       movb *r5+,*r13
       dec  r4
       jne  decomp_sprites_7
*      Next sprite
       inc  r3                         ; Because we always end at pixel off
       dec  r2
       jne  decomp_sprites_1
*      Return
       b    *r15                       ; Pop return address and return
*// decomp_sprites


*********************************************************************************
*
* Set graphics mode
*
gmode:
       mov  r11,*r10+                  ; Push return address onto the stack
       li   r1,vregs
       li   r2,12
gmode_1:
       mov  *r1+,r0
       bl   @vwtr                      ; Set register
       dec  r2
       jne  gmode_1
*      Return
       b    *r15                       ; Pop return address and return
*      VDP registers
vregs:
       byte >39,>1c                    ; F18A unlock
       byte >39,>1c                    ; F18A unlock
       byte >1e,>04                    ; Set four sprites per line
       byte >39,>1c                    ; F18A lock
       byte >00,>00                    ; Graphics I mode
       byte >01,>a2                    ; 16K, display off, interrupt enabled, 16x16 sprites
       byte >02,nametb/>400            ; Name table
       byte >03,colrtb/>40             ; Color table
       byte >04,ptrntb/>800            ; Pattern table
       byte >05,spratb/>80             ; Sprite attribute table
       byte >06,sprptb/>800            ; Sprite pattern table
       byte >07,>01                    ; Backdrop color
*// gmode
